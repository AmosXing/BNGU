import cv2
import numpy as np

cap = cv2.VideoCapture(1)

objectPoints = np.array([
    [0.0, 0.0, 0.0],
    [1.0, 0.0, 0.0],
    [1.0, 0.6, 0.0],
    [0.0, 0.6, 0.0]
], dtype=np.float32)

cameraMatrix = np.array([[800, 0, 320],
                         [0, 800, 240],
                         [0,   0,   1]], dtype=np.float32)
distCoeffs = np.zeros((5, 1))

def sort_corners(pts):
    pts = pts.reshape(4, 2)
    center = np.mean(pts, axis=0)
    sorted_pts = sorted(pts, key=lambda p: np.arctan2(p[1] - center[1], p[0] - center[0]))
    sorted_pts = np.array(sorted_pts)
    top = sorted(sorted_pts[:2], key=lambda p: p[0])
    bottom = sorted(sorted_pts[2:], key=lambda p: p[0])
    return np.array([top[0], top[1], bottom[1], bottom[0]], dtype=np.float32)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    binary = cv2.adaptiveThreshold(
        blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
        cv2.THRESH_BINARY_INV, 21, 10
    )

    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for cnt in contours:
        epsilon = 0.02 * cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, epsilon, True)

        if len(approx) == 4 and cv2.contourArea(approx) > 10000:
            sorted_img_pts = sort_corners(approx)

            for i, pt in enumerate(sorted_img_pts):
                pt_int = tuple(pt.astype(int))
                cv2.circle(frame, pt_int, 6, (0, 0, 255), -1)
                cv2.putText(frame, str(i), (pt_int[0]+5, pt_int[1]-5),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

            success, rvec, tvec = cv2.solvePnP(objectPoints, sorted_img_pts, cameraMatrix, distCoeffs)
            if success:
                axis = np.float32([[0, 0, 0],
                                   [0.5, 0, 0],
                                   [0, 0.3, 0],
                                   [0, 0, -0.3]])  # 注意：Z轴反向向上

                imgpts, _ = cv2.projectPoints(axis, rvec, tvec, cameraMatrix, distCoeffs)
                origin = tuple(imgpts[0].ravel().astype(int))
                x_end = tuple(imgpts[1].ravel().astype(int))
                y_end = tuple(imgpts[2].ravel().astype(int))
                z_end = tuple(imgpts[3].ravel().astype(int))

                cv2.line(frame, origin, x_end, (0, 0, 255), 3)   
                cv2.line(frame, origin, y_end, (0, 255, 0), 3)   
                cv2.line(frame, origin, z_end, (255, 0, 0), 3)  

                cv2.putText(frame, f"rvec: {np.round(rvec.ravel(), 2)}", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
                cv2.putText(frame, f"tvec: {np.round(tvec.ravel(), 2)}", (10, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)

    cv2.imshow("Pose from Any Quadrilateral", frame)
    if cv2.waitKey(1) == 27:  # ESC
        break

cap.release()
cv2.destroyAllWindows()
